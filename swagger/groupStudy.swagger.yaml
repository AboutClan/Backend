# swagger: "2.0"
# info:
#   description: "Study about api"
#   version: "1.0.0"
#   title: "swagger"
# tags:
#   - name: User
#     description: 게시판 API

# paths:
#   /user/active:
#     get:
#       summary: "get active user list"
#       tags: [user]
#       responses:
#         200:
#           description: 조회 결과
#           content:
#             application/json: "content/type"

openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: About api
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
tags:
  - name: user
    description: Everything about users
paths:
  /user/active:
    put:
      tags:
        - user
      summary: Get active users list
      description: Get active users list
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
components:
  schemas:
    Group:
      type: object
      properties:
        title:
          type: String
          example: 코딩테스트
        isFree:
          type: boolean
          example: false
        fee:
          type: Number
          example: 1000
        challenge:
          type: String
        feeText:
          type: String
          example: 숙제에 대한 벌금
        rules:
          type: array
          items:
            type: string
          example: []
        category:
          type: object,
          properties:
            main:
              type: string
              example: 프로그래밍
            sub:
              type: string
              example: 코딩테스트
        attendance:
          type: object
          properties:
            firstDate:
              type: string
              example: ""
            lastweek:
              type: array
              items:
                type: object
                properties:
                  uid:
                    type: string
                    example: 1234567891
                  name:
                    type: string
                    example: 홍길동
                  attendRecord:
                    type: array
                    items:
                      type: string
                  attendRecordSub:
                    type: array
                    items:
                      type: string
        hashTag:
          type: String
          example: "#수원/D #친목 #소그룹"
        content:
          type: String,
          example: "수원 친목 소그룹 D조 입니다!"
        guide:
          type: String,
          example: "같이 즐거운 추억 쌓아가요!"
        memberCnt:
          type: object,
          properties:
            min:
              type: integer
              example: 5
            max:
              type: integer
              example: 10
        age:
          type: array
          items:
            type: integer
        gender:
          type: boolean,
          example: false
        password:
          type: String,
          example: 10
        questionText:
          type: String,
          example: 저희 그룹으로 가입하고 싶으신 이유가 있나요?
        waiting:
          type: array
          items:
            type: object,
            properties:
              user:
                type: string
                pattern: "^[0-9a-fA-F]{24}$"
                description: MongoDB ObjectId
              answer:
                type: string
                example: 가입이유
              pointType:
                type: string
                example: deposit
        participants:
          type: array,
          items:
            type: object
            properties:
              user:
                type: string
                pattern: "^[0-9a-fA-F]{24}$"
                description: MongoDB ObjectId
              role:
                type: string
                enum:
                  - admin
                  - member
                  - manager
                  - human
                example: admin
              attendCnt:
                type: integer
                example: 0
        organizer:
          type: string
          pattern: "^[0-9a-fA-F]{24}$"
          description: MongoDB ObjectId
        status:
          type: string,
          enum:
            - "pending"
            - "open"
            - "close"
            - "end"
            - "gathering"
          example: "pending"
        id:
          type: integer,
          example: 63
        period:
          type: string,
          example: 월 1회
        comment:
          type: array
          items:
            type: object
            properties:
              user:
                type: string
                pattern: "^[0-9a-fA-F]{24}$"
                description: MongoDB ObjectId
              comment:
                type: string
                example: 코멘트
        link:
          type: string
          example: link
        location:
          type: string
          enum:
            - "수원"
            - "양천"
            - "안양"
            - "강남"
            - "동대문"
            - "전체"
            - "수원/안양"
            - "양천/강남"
            - "인천"
          example: 수원
        image:
          type: string,
          example: "http://"
      xml:
        name: order
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
